import ConfigParser,os,sys,time,thread,threading,htx
from tftp import tftpcfg, tftp_engine
import PcapMachine 
from testlibs import *
import wx.richtext as rt
import wx
import traceback
import htx
from sysVars import *
import buildkey
#execfile('sysVars.py') 
if os.path.isfile('c:\\station.ini'):
   execfile('c:\\station.ini') 

ConfigDirectory =os.getcwd()# os.path.join(os.getcwd(),'config')
sys.path.append(ConfigDirectory)
if os.path.isfile('%s\\__init__.py'%ConfigDirectory):
   execfile('%s\\__init__.py'%ConfigDirectory) 

class StateMachine:
      def __init__(self,parent):
          self.ConfigFilePath=''
          self.ConfigFile=[]
          self.parent=parent
          self.PcapServer=''
          self.label_name=''
          self.emp = parent.emp
          
      def _in_action(self):
          id_ = self.parent.ScanLabel.GetValue().strip()[-1]
          if id_ not in ('1','2','3','4','5','6','7','8') or len(self.parent.ScanLabel.GetValue()) > 4:
              self._scan_msg("Input dut id (1~8) error : %s"%id_) 
              return 
          id_ = int(id_)-1
          if self.parent.DUT_LIST[id_][0].GetBackgroundColour() in self.parent.flash: 
             self._scan_msg("DUT %s in the test"%(id_+1)) 
             return 
          for p in range(8):
              if self.parent.DUT_LIST[p][0].GetBackgroundColour()==self.parent.ActionColor:
                 self.parent.DUT_LIST[p][0].SetBackgroundColour(self.parent.DisableColor) 
                 self.parent.DUT_LIST[p][0].Refresh()
          self.parent.DUT_LIST[id_][0].SetBackgroundColour(self.parent.ActionColor) 
          self.parent.DUT_LIST[id_][2].SetValue('')
          self.parent.DUT_LIST[id_][3].SetValue('')
          self.parent.DUT_LIST[id_][4].SetValue('')
          self.parent.DUT_LIST[id_][5].SetValue(0)
          self.parent.DUT_LIST[id_][6].SetValue('')
          self.parent.DUT_LIST[id_][0].SetToolTipString('')
          dutid = self.parent.DUT_LIST[id_][1].GetLabel()
          self.parent.DUT_LIST[id_][1].SetLabel(dutid[:6])
          self.parent.DUT_LIST[id_][0].Refresh()
          self.dutid = id_
          self.labels=[]
          self.label_id=0
          self.label_name=''
          self.parent.DUT_LIST[id_][-1].SetValue('')
          self.label_name = self.LabelType[self.label_id].split(',')[0].strip().upper() 
          self._in_label(self.label_name)       
          
      def state(self,val):
          if val=='PN':self._init()
          else:
             label_ = self.parent.ScanLabel.GetValue() 
             if 'CANCEL'==label_.strip().upper():
                self._in_dutid() 
                return 
             if 'CHECK'==label_.strip().upper():
                self.CheckDialog() 
                return
          if val=='DUT ID':self._in_action()
          if val== self.label_name : self._check_label()
      
      def CheckDialog(self):
          try:
             self.ConfigFile.get('Base','CheckDialog')
             if "Dialog.exe" not in os.popen("tasklist").read():
                os.startfile("C:\\AFIMainGui\\Dialog.exe")
                return
             self._scan_msg("failed: Dialog is show")
             self.parent.ScanLabel.SetBackgroundColour( "red" ) 
          except:
             self.parent.CheckLED_Dialog.ShowModal()   
                      
      def _check_label(self):
          val_ = self.parent.ScanLabel.GetValue()  
          len_ = self.LabelType[self.label_id].split(',')[1].strip()
          chart_= self.LabelType[self.label_id].split(',')[2].strip()
          if len(val_) <> int(len_) or chart_ <> val_[:len(chart_)]:
             self._scan_msg("Label format error ,length %s ,fix chart %s : %s"%(len_,chart_,val_)) 
             return 
          if len(self.LabelType[self.label_id].split(',')) > 3:
                try: int(val_,16)
                except:
                   self._scan_msg("Label format error ,length %s ,fix chart %s : %s"%(len_,chart_,val_)) 
                   return
          if self.label_id < 2:
             for d in range(8):
                 if val_==self.parent.DUT_LIST[d][2].GetValue() or val_==self.parent.DUT_LIST[d][3].GetValue() :
                    c_ = self.parent.DUT_LIST[d][0].GetBackgroundColour()
                    if c_<>self.parent.RedColor and c_<>self.parent.LimeColor and c_<>self.parent.DisableColor:
                       self._scan_msg("Bar code scanning repetition") 
                       return 
          self.labels.append(val_)
          if self.label_id==0:
             self.parent.DUT_LIST[self.dutid][2].SetValue(val_)
          elif self.label_id==1:
             self.parent.DUT_LIST[self.dutid][3].SetValue(val_)
          if self.label_id == len(self.LabelType)-1:
             MainFunction(self,'test').start()
             self._in_dutid()
             
          else:
             self.label_id += 1  
             self.label_name = self.LabelType[self.label_id].split(',')[0].strip().upper() 
             self._in_label(self.label_name)              
      
      def _in_label(self,name):
          self.parent.LabelName.SetLabel(name)
          self.parent.ScanLabel.SetBackgroundColour( "yellow" )
          self.parent.StatusBar.SetStatusText("Please input %s label"%name)

      def close(self):
          if type(self.parent.TFTPServer)<>type(''):
             self.parent.TFTPServer.shutdown()
          if self.PcapServer:
             self.PcapServer.close()
      
      def _in_dutid(self):
          self.parent.LabelName.SetLabel('DUT ID')
          self.parent.ScanLabel.SetBackgroundColour( "yellow" )
          self.parent.StatusBar.SetStatusText("Please input dut id (1~8)")
          self.parent.ScanLabel.Enable(True)
      
      def _show_test_state(self,pos,color=0,errcode='',errinfo=''):
          colors_=(self.parent.YellowColor,self.parent.RedColor,self.parent.LimeColor)
          self.parent.DUT_LIST[pos][0].SetBackgroundColour(colors_[color]) 
          self.parent.DUT_LIST[pos][0].SetToolTipString(errinfo)
          dutid = self.parent.DUT_LIST[pos][1].GetLabel()
          if errcode:
             self.parent.DUT_LIST[pos][1].SetLabel(dutid[:6]+' - %s'%errcode)
          self.parent.DUT_LIST[pos][0].Refresh()
          
      def _scan_msg(self,e):
          self.parent.StatusBar.SetStatusText(e)
          self.parent.ScanLabel.SetBackgroundColour( "red" )
          
      def _int_msg(self,e):
          self.close()
          time.sleep(1)
          self.parent.StatusBar.SetStatusText(e)
          self.parent.LabelName.SetLabel('PN')
          self.parent.ScanLabel.SetBackgroundColour( "red" )
          self.parent.ScanLabel.Enable(True)
      
      def _set_gauge_range(self,range_):
          for ind_ in range(8):
              self.parent.DUT_LIST[ind_][5].SetRange(range_)
                         
      def _init(self):
          self.PN=self.parent.ScanLabel.GetValue()
          self.ConfigFilePath='%s\\%s.ini'%(ConfigDirectory,self.PN)
          self.ConfigFile=ConfigParser.SafeConfigParser()
          if not self.ConfigFile.read(self.ConfigFilePath):
             self._int_msg("Cannot find the %s models"%self.PN) 
             return 
          else:
             #self.parent.ScanLabel.SetBackgroundColour( "Green" )  
             self.parent.configfile = self.ConfigFilePath
             self.parent.ScanLabel.Enable(False)
             self.parent.StatusBar.SetStatusText(self.parent.InitStr) 
             self.parent.LabelName.SetLabel('INIT')
             #read tftp config
             try:
                cfgdict = tftpcfg.getconfigstrict(ConfigDirectory, self.ConfigFilePath)
                self.ModelName = self.ConfigFile.get('Base','ModelName')
                self.StationName = self.ConfigFile.get('Base','StationName')
                self.parent.TFTPPath.SetLabel(self.ConfigFile.get('TFTPSERVER','tftprootfolder'))
                self.AFI_LANIP = self.ConfigFile.get('AFI','LANIP')
                self.AFI_ETH0IP = self.ConfigFile.get('AFI','ETH0IP')
                self.AFI_VLAN1IP = self.ConfigFile.get('AFI','VLAN1IP')
                self.AFI_CARDS = self.ConfigFile.get('AFI','CARDS')
                self.TELNET = self.ConfigFile.get('Base','TELNET')
                self.LANIP = self.ConfigFile.get('Base','LANIP')
                self.LabelType = self.ConfigFile.get('Base','LabelType').split('|') 
                self.config = self.ConfigFile  
                self.parent.Flows=self.Flows = map(strip,self.ConfigFile.get('Base','Flows').split(','))
                for flow_ in self.Flows:
                    self.ConfigFile.items(flow_)
                self._set_gauge_range(len(self.Flows))
             except tftpcfg.ConfigError, e:
                self._int_msg("Error in config file : %s of [TFTPSERVER] section"%e)
                return 
             except ConfigParser.NoSectionError,e:
                self._int_msg("Error in config file : %s"%e)
                return 
             except ConfigParser.NoOptionError,e:
                self._int_msg("Error in config file : %s"%e)
                return 
             self.logPath = "c:\\%s-Log\\"%self.ModelName+"-".join(map(str,time.gmtime()[:3]))+"\\"
             if not os.path.isdir(self.logPath):
                os.system("mkdir %s"%self.logPath)
             self.parent.ModuleName.SetLabel(self.ModelName) 
             self.parent.StationName.SetLabel(self.StationName)
             self.parent.TFTPServer = tftp_engine.ServerState(**cfgdict)
             thread.start_new_thread(tftp_engine.loop_nogui, (self.parent.TFTPServer,))
             self.parent.TFTPServerState.SetBackgroundColour("yellow")
             time.sleep(1)
             #if not self.parent.TFTPServer.serving:
             #   self._int_msg(self.parent.TFTPServer.text.split('\n')[-1])
             #   return
             self.parent.AFIServerState.SetBackgroundColour("yellow")
             self.parent.AFIServerState.Refresh()
             self.PcapServer=PcapMachine.server(self)           
             if not self.PcapServer.state:
                self.parent.AFIServerState.SetBackgroundColour("red")
                self.parent.AFIServerState.Refresh()
                return  
             MainFunction(self).start()
              


class MainFunction(threading.Thread):
      def __init__(self,parent,state='init'):
          threading.Thread.__init__(self)
          self.parent = parent
          self.state = state
          self.msg = ''
          self.emp = parent.emp
          self.StationName = self.parent.StationName

      def _init(self):
          '''AFI Init and install patarmete'''
          try: 
              term_c = (SocketTTY(self.parent.parent.Buffers,(0,0)),SocketTTY(self.parent.parent.Buffers,(1,0))) 
              for i in range(2):
                  #detection ccu card
                  for wait_s in range(30):
                      term_c[i] << 'info'
                      if 'info' in term_c[i].wait('info',3)[-1]:break
                      elif wait_s==29 :raise Except('CCU %s not found'%i)
                  #detection other cards
                  for wait_s in range(60):
                      info = lWaitCmdTerm(term_c[i],'info','info',3)
                      flag_ = 1
                      for card in self.parent.AFI_CARDS.split('|')[i].split(','):
                          if card.strip().upper() not in info:
                             if wait_s==59:raise Except('CCU %s : %s not found'%(i,card))
                             flag_ = 0
                             break
                      if flag_:break       
                  term_cb = (SocketTTY(self.parent.parent.Buffers,(0,1)),SocketTTY(self.parent.parent.Buffers,(1,1))) 
                  ports=['1','2','3','4']
                  for termcb in term_cb:
                      for p in ports:
                          lWaitCmdTerm(termcb,'rf %s n'%p,'OK',3)                      
                  #set ccu eth0 and vlan ip
                  mask_ = '255.255.255.0'
                  eth0_=self.parent.AFI_ETH0IP.split('|')
                  vlan1_=self.parent.AFI_VLAN1IP
                  lWaitCmdTerm(term_c[i],'ip %s %s %s %s'%(eth0_[i],mask_,vlan1_,mask_),'OK',3)
                  
                  #set ccu prelay 
                  lWaitCmdTerm(term_c[i],'prelay 69 eth0 69 %s 1'%self.parent.AFI_LANIP,'OK',3)  #tftp prelay
                  for v_ in range(1,8):
                      for p_ in range(1,5):
                          lWaitCmdTerm(term_c[i],'prelay 30%s%s vlan%s%s 23 %s 23'%(v_,p_,v_,p_,self.parent.LANIP),'OK',3)  #telnet prelay                     
              self.parent._in_dutid()
              self.parent.parent.AFIServerState.SetBackgroundColour("blue")
              self.parent.parent.AFIServerState.Refresh()
          except Except,msg:
              self.parent._int_msg(str(msg))
              self.parent.parent.AFIServerState.SetBackgroundColour("red")
              self.parent.parent.AFIServerState.Refresh()
      
      def SetPanel(self,*argv):
          ''' argv = sate , errcode , errinfo
              state = start,fail,pass,flash1,flash2,flash2,flash4          
          '''
          self.parent.parent.DUT_LIST[self.dutid][0].SetLabel('')  
          if argv[0] == 'start':self.parent._show_test_state(self.dutid)
          if argv[0] == 'fail' : 
             self.parent._show_test_state(self.dutid,color = 1,errcode=argv[1],errinfo=argv[2]) 
          if argv[0] == 'pass':self.parent._show_test_state(self.dutid,color = 2)
          if argv[0] == 'flash1':self.parent.parent.DUT_LIST[self.dutid][0].SetLabel('3')
          if argv[0] == 'flash2':self.parent.parent.DUT_LIST[self.dutid][0].SetLabel('4') 
          if argv[0] == 'flash3':self.parent.parent.DUT_LIST[self.dutid][0].SetLabel('5')  
          if argv[0] == 'flash4':self.parent.parent.DUT_LIST[self.dutid][0].SetLabel('6')   
      
      def SetLog(self,s,color=0):
          '''
             color : 0  --  white
                     1  --  red
                     2  --  lime
          '''
          colors=[(255,255,255),(255,0,0),(0,255,0)]
          s += '\n'
          #self.parent.parent.DUT_LIST[self.dutid][-1].AppendText(str(type(self.log)))
          #self.parent.parent.DUT_LIST[self.dutid][-1].AppendText(str(type(sys.stdout)))
          #if type(self.log)==type(sys.stdout):
          if self.log and not self.log.closed:
             self.log.write(s) 
          #self.parent.parent.DUT_LIST[self.dutid][-1].BeginTextColour(colors[color])
          #self.parent.parent.DUT_LIST[self.dutid][-1].selcolor(colors[color])
          #RichTextAttr = rt.TextAttrEx()
          #RichTextAttr.SetTextColour(colors[color])
          #self.parent.parent.DUT_LIST[self.dutid][-1].BeginStyle(RichTextAttr)
          beg = self.parent.parent.DUT_LIST[self.dutid][-1].GetLastPosition()
          end = self.parent.parent.DUT_LIST[self.dutid][-1].GetLastPosition() + len(s)
          self.parent.parent.DUT_LIST[self.dutid][-1].SetStyle(beg,end,wx.TextAttr(colors[color],'black'))
          #self.parent.parent.DUT_LIST[self.dutid][-1].WriteText(s)
          self.parent.parent.DUT_LIST[self.dutid][-1].AppendText(s)
          #self.parent.parent.DUT_LIST[self.dutid][-1].EndStyle()
          self.parent.parent.DUT_LIST[self.dutid][-1].ShowPosition(end)
          #time.sleep(0.2)
          
      def SetProcess(self,flow):
          self.parent.parent.DUT_LIST[self.dutid][4].SetValue(flow)
          val_ = self.parent.parent.DUT_LIST[self.dutid][5].GetValue()
          self.parent.parent.DUT_LIST[self.dutid][5].SetValue(val_+1)       
      
      def GetConfig(self,section,item):
          return self.parent.ConfigFile.get(section,item).strip()  
      
      def ExcuteCmd(self,term,cmds):
          for cmd_ in map(strip,cmds):
              if not cmd_:continue
              cmd,waitstr,timeout,count=map(strip,cmd_.split(','))
              c_port = self.dutid
              if c_port > 3 : c_port  -=  4
              if cmd in self.cmd_pwd_dict: 
                 term << cmd
                 if waitstr in term.wait(waitstr,5)[-1]: continue
                 for try_ in range(6): 
                     lWaitCmdTerm(self.term[0],'uartd close %s'%c_port,'ok',5)
                     term << self.cmd_pwd_dict[cmd] 
                     time.sleep(0.5)                       
                     term << cmd
                     lWaitCmdTerm(self.term[0],'uartd open %s 0'%c_port,'ok',5) 
                     term << ''
                     data = term.wait(waitstr,5)[-1]
                     if waitstr in data : break 
                     if try_==5:raise Except('failed: %s,%s'%(cmd,data)) 
                 continue               
              lWaitCmdTerm(term,cmd,waitstr,float(timeout),int(count))
   
             
      def run(self):
          if self.state=='init':
             #self.parent._in_dutid() 
             self._init()
          else:
             try:
                 self.result = ['FAIL',1]
                 self.errcode = ''
                 self.errinfo = ''
                 self.log = ''
                 self.dutid=self.parent.dutid
                 self.port=self.dutid+1
                 if self.port >4 : self.port -= 4
                 self.starttime=time.time()             
                 sw_id_ = self.dutid + 2
                 vm_id_ = self.dutid/2 + 6
                 dut_id_ = self.dutid+8
                 tport_ = '30%s1'%(self.dutid+1)
                 if self.dutid > 3:
                    sw_id_ = self.dutid - 2
                    vm_id_ = (self.dutid-4)/2 + 6
                    tport_ = '30%s1'%(self.dutid-3)
                    dut_id_ = self.dutid + 4
                 self.term=[]          #[CCU,CB,SW,VM,DUT]
                 self.term.append(SocketTTY(self.parent.parent.Buffers,(self.dutid/4,0)))            #ccu term
                 self.term.append(SocketTTY(self.parent.parent.Buffers,(self.dutid/4,1)))            #CB term
                 self.term.append(SocketTTY(self.parent.parent.Buffers,(self.dutid/4,sw_id_)))       #SW term    
                 self.term.append(SocketTTY(self.parent.parent.Buffers,(self.dutid/4,vm_id_)))       #VM term              
                 if int(self.parent.TELNET.strip()):
                    self.term.append(htx.Telnet(self.parent.LANIP,int(tport_)))                      #Dut telnet
                 else:
                    self.term.append(SocketTTY(self.parent.parent.Buffers,(self.dutid/4,dut_id_)))   #Dut term       
                 self.labels=self.parent.labels #0:mac,1:sn,2:ssid,3:wpakey
                 #self.parent.parent.DUT_LIST[self.dutid][-1].Enable( False ) 
                 #self.SetPanel('start')
                 self.log=open('%s%s.%s'%(self.parent.logPath,self.labels[0],self.StationName),'w')
                 self.Return=[self.parent.parent.CheckLED_Dialog,self.parent.parent.emp]
                 self.SetLog("%s test program , %s , Station: %s ; dut_id:%s"%(self.parent.ModelName,VERSION,STATION,int(self.dutid)+1))
                 self.SetLog("EMP : %s"%self.emp)
                 self.SetLog("------------------------------------------------------------------------------")   
                 self.SetLog("Start Time : %s"%time.asctime())
                 self.mac = self.labels[0]
                 self.SetLog("MAC Address : %s"%self.mac )
                 if len(self.labels) > 1:
                    self.sn = self.labels[1]
                    self.SetLog("Serial Number : %s"%self.sn)
                 if len(self.labels) > 2:
                    self.ssid = self.labels[2]
                    self.SetLog("SSID : %s"%self.ssid)
                 if len(self.labels) > 3:
                    self.wpakey = self.labels[3]
                    self.SetLog("WPAKey : %s"%self.wpakey)   
                 self.cmd_pwd_dict = eval(self.GetConfig('Base','CMD_PWD_DICT'))
                 
                 self.term[1] << 'rf %s n'%self.port
                 test_time = time.time()
                 #######################################################################################          
                 for flow in self.parent.Flows[:-1]:
                     f_time = time.time()
                     self.SetPanel('start')
                     self.SetProcess(self.GetConfig(flow,'FlowName'))
                     self.ExcuteCmd(self.term[-1],map(strip,self.GetConfig(flow,'InCmd').split('|')))
                     #self.Parameter = map(strip,self.GetConfig(flow,'Parameter').split('|'))
                     #print self.GetConfig(flow,'Enable').strip()
                     #print 'Function Nmae = %s'%self.GetConfig(flow,'FunctionName') 
                     if int (self.GetConfig(flow,'Enable').strip()):
                        eval('%s(self.dutid,self.term,self.labels,self.SetPanel,self.SetLog,self.GetConfig,flow,[self.Return])'%self.GetConfig(flow,'FunctionName'))
                     self.ExcuteCmd(self.term[-1],map(strip,self.GetConfig(flow,'OutCmd').split('|')))
                     end_f_time = time.time()- f_time 
                     self.SetLog( "\n")
                     self.SetLog( "%s Test time: %3.2f (sec)"%(self.GetConfig(flow,'FunctionName'),end_f_time))
                     self.SetLog( "---------------------------------------------------------------------------")
                     
                 ######################################################################################
                 
                 
    
                 self.result=('PASS',2)
                  
             except Except,msg:
                 msg = str(msg)[:500]
                 if 'ErrorCode' not in msg:
                    msg = 'ErrorCode(0000):'+msg
                 self.errcode = msg.split('ErrorCode(')[-1].split(')')[0]
                 self.errinfo = str(msg)
                 self.SetLog(msg,1)
                 self.result=('FAIL',1) 
               
             except:
                 msg=str(traceback.format_exc())
                 if 'ErrorCode' not in msg:
                     msg = 'ErrorCode(0001):'+msg
                 self.errcode = msg.split('ErrorCode(')[-1].split(')')[0]
                 self.errinfo = str(msg)
                 self.SetLog(msg,1)
                 self.result=('FAIL',1) 
             
             self.term[1] << 'rf %s n'%self.port
             self.term[0] << 'uartd close %s'%(self.port-1)
             self.SetLog("End Time : %s"%time.asctime())
             self.SetLog("Total Time : %s"%(time.time()-self.starttime))
             self.SetLog("Test Result:%s"%self.result[0],self.result[1])
             self.Return.append(self.result[0])
             if self.log:self.log.close()
             try:
                 if self.result[0]=='PASS': 
                    self.SetProcess(self.GetConfig(self.parent.Flows[-1],'FlowName'))
                 if int (self.GetConfig(self.parent.Flows[-1],'Enable').strip()) and self.log:   
                    eval('%s(self.dutid,self.term,self.labels,self.SetPanel,self.SetLog,self.GetConfig,flow,[self.Return])'%self.GetConfig(self.parent.Flows[-1],'FunctionName'))
             except Except,msg:
                 msg = str(msg)
                 if 'ErrorCode' not in msg:
                    msg = 'ErrorCode(0005):'+msg
                 if self.result[0]=='PASS':
                    self.errcode = msg.split('ErrorCode(')[-1].split(')')[0]
                    self.errinfo = str(msg)
                 self.SetLog(msg,1)
                 self.result=('FAIL',1)      
             except:
                 msg = str(traceback.format_exc())
                 if 'ErrorCode' not in msg:
                    msg = 'ErrorCode(0001):'+msg
                 if self.result[0]=='PASS':
                    self.errcode = msg.split('ErrorCode(')[-1].split(')')[0]
                    self.errinfo = str(msg)
                 self.SetLog(msg,1)
                 self.result=('FAIL',1)          
             self.SetPanel(self.result[0].lower(),self.errcode,self.errinfo) 

                  





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































